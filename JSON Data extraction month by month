#@title JSON Data extraction month by month with state column
import pandas as pd
import requests
from openpyxl import Workbook

# API endpoint URL
api_url = "http://ssscmsapi.samparksmartshala.org:8082/dashboardapis/sss_resources_used_by_subject_doctype"

# Define the start and end dates for the last three months
import datetime
end_date = datetime.date.today()
start_date = end_date - pd.DateOffset(months=3)

# Create an empty DataFrame to store the merged data
merged_df = pd.DataFrame()

# Iterate over the last three months
for date in pd.date_range(start=start_date, end=end_date, freq='MS'):
    # Format the start and end dates
    start = date.strftime('%Y-%m-%d')
    end = (date + pd.DateOffset(months=1) - pd.DateOffset(days=1)).strftime('%Y-%m-%d')

    # Send a GET request to the API with the specific start and end dates
    response = requests.get(api_url, params={'state': 'RJ', 'startdate': start, 'enddate': end})

    # Check if the request was successful
    if response.status_code == 200:
        # Parse the JSON response
        json_data = response.json()

        # Extract the required columns from the API response
        api_data = []
        for state, state_data in json_data.items():
            for subject, subject_data in state_data['resources_used_by_subject'].items():
                for subtype, subtype_data in subject_data.items():
                    if subtype != 'TOTAL':
                        api_data.append([
                            date.strftime('%Y'),
                            date.strftime('%m'),
                            'RJ',  # Set the state code to "RJ"
                            state_data['name'] if state == 'RJ' else '',
                            subject,
                            subtype,
                            subtype_data['TOTAL']
                        ])

        # Create a DataFrame from the extracted data
        df = pd.DataFrame(api_data, columns=['Year', 'Month', 'State Code', 'State Name', 'Subject', 'Subtype', 'Total'])

        # Merge the extracted data with the existing merged DataFrame
        merged_df = pd.concat([merged_df, df], ignore_index=True)
    else:
        print(f"Error: Failed to retrieve data for {start} - {end}")

# Save the merged DataFrame to an Excel file
excel_file = "data.xlsx"
merged_df.to_excel(excel_file, index=False)
print(f"Data saved to {excel_file}")
